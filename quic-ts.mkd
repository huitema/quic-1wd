---
title: Quic Timestamps For Measuring One-Way Delays
abbrev: QUIC-TS
docname: draft-huitema-quic-ts-00
category: exp
date: 2020

stand_alone: yes

ipr: trust200902
area: Transport
kw: Internet-Draft

coding: us-ascii
pi: [toc,  sortrefs, symrefs, comments]

author:
      -
        ins: C. Huitema
        name: Christian Huitema
        org: Private Octopus Inc.
        street: 427 Golfcourse Rd
        city: Friday Harbor
        code: WA 98250
        country: U.S.A
        email: huitema@huitema.net

--- abstract

The TimeStamp frame can be added to Quic packets when one way delay measurements
is useful. The timestamp is set to the number of microseconds from the
beginning of the connection to the time at which the packet is sent. The draft
defines the "enable_time_stamp" transport parameter for negotiating the
use of this extension frame, and a new frame types for the time_stamped frame.

--- middle

# Measuring One-Way Delays

The QUIC Transport Protocol {{!I-D.ietf-quic-transport}} provides a
secure, multiplexed connection for transmitting reliable streams of
application data. The algorithms for QUIC Loss Detection and Congestion Control
{{!I-D.ietf-quic-recovery}} use measurement of Round Trip Time (RTT) to
determine when packets should be retransmitted. RTT measurements are useful,
but there are however many cases in which more precise One-Way Delay (1WD)
measurements enable more efficient Loss Detection and Congestion Control.

An example would be the Low Extra Delay Background
Transport (LEDBAT) {{?RFC6817}} which uses variations in transmission
delay to detect competition for transmission resource. Experience shows
that while LEDBAT may be implemented using RTT measurements, it is 
somewhat inefficient because it will cause unnecessary slowdowns in
case of queues or delayed ACKs on the return path. Using 1WD solves
these issues. Similar argument can be made for most delay-based algorithms.

We propose to enable one way delay measurements in QUIC by defining
a time_stamp frame carrying the time at which a packet is sent. The use of this
extension frame is negotiated with a transport parameter,
"enable_time_stamp". When the extension is negotiated by
both parties, this frame can be used in conjunction with other
such as ACK to measure one way delays.

## Terms and Definitions

The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
"SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in BCP 14 {{!RFC2119}} {{!RFC8174}}
when, and only when, they appear in all capitals, as shown here.

# Specification

The enable_time_stamp transport parameter used for negotiating the use
of the extension frame
is defined in {{negotiation}}. The time_stamp frame format is defined
in {{time-stamp-format}}.

## Negotiation {#negotiation}

The use of the time_stamp frame extension is negotiated using a transport
parameter:

* enable_time_stamp (TBD)

The enable time stamp transport parameter is included if the endpoint
accepts and sends time_stamp frames for this connection. 
This parameter has a zero-length value. Negotiation is successful if
both peers support include this parameter in their transport parameter
message. Peers that receive a time_stamp frame in the absence of
successful negotiation MAY terminate the connection with a PROTOCOL
VIOLATION error.

If negotiation is successful the peers SHOULD add a time_stamp frame to
packets carrying an ACK frame. 

# Time Stamp frame format {#time-stamp-format}

Timestamped ACK are identified by the frame
type:

* time_stamp (TBD)

Time stamp frames carry a single parameter, the time stamp.

~~~
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                          Time Stamp (i)                     ...
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
~~~
{: #ack-format title="ACK Frame Format with Time Stamp"} 

The time stamp encodes the number of microseconds since the beginning
of the connection, as measured by the peer at the time at which the packet
is sent. It is encoded using the exponent selected by the peer
in the ack_delay_exponent. The exponent reduced time stamp is encoded 
as a variable length integer.

## RTT Measurements

RTT measurements are performed as specified in Section 4 of
{{!I-D.ietf-quic-recovery}}, without reference to the Timestamp
parameter of the Timestamped ACK frames.

## One-Way Delay Measurements

An endpoint generates a One Way Delay Sample on receiving a
packet containing both a Time Stamp frame and an ACK frame that
meets the following two conditions:

* the largest acknowledged packet number is newly acknowledged, and

* at least one of the newly acknowledged packets was ack-eliciting.

The One Way Delay sample, latest_1wd, is generated as the time elapsed since
the largest acknowledged packet was sent, corrected for the difference
between local time at the sending peer and connection time at the
receiving peer, phase_shift.

   latest_1wd = time_stamp - send_time_of_largest_acked - phase_shift

By convention, the phase_shift is estimated upon reception of the first
RTT sample, first_rtt. It is set to:

   phase_shift = time_stamp - send_time_of_largest_acked - latest_rtt/2

In that formula, we assume that the local time are measured in
microseconds since the beginning of the connection.

We understand that clocks may drift over time, and that simply
estimating a phase shift at the beginning of a connection may be
too simplistic for long duration connections. Implementations
MAY adopt different strategies to reestimate the phase shift
at appropriate intervals. Specifying these strategies is beyond
the scope of this document.

# Discussion

This document replaces an earlier proposal to modify the format
of the ACK frame by including a time stamp inside the modified
frame. The revised proposal encodes the time stamp independently
of the ACK frame, which requires slightly more overhead to
encode the type of the time stamp frame. 

Defining an independent frame allows for more flexibility. This
draft defines the combination of time stamp with ACK frames, but
they could be combined with other frames as well. For example,
adding a time stamp to packets carrying a Path Response could
allow measuring one way delays before deciding
to migrate to a new path.

# Security Considerations

The Timestamp value in the Time Stamp frame is asserted by the sender
of the packet. Adversarial peers could chose values of the time stamp
designed to exercise side effects in congestion control algorithms
or other algorithms relying on the one-way delays. This can be
mitigated by running plausibility checks on the received values.
For example, each peer can maintain statistics not just on the
One Way Delays, but also on the differences between One Way Delays
and RTT, and detect outlier values. Peers can also compare the 
differences between timestamps in packets carrying acknowledgements and
the differences between the sending times of corresponding packets,
and detect anomalies if the delays between acknowledging packets appears
shorter than the delays when sending them.

# IANA Considerations

This document registers a new value in the QUIC Transport Parameter
Registry:

   Value:  TBD (using value 0x7157 in early deployments)

   Parameter Name:  enable_time_stamp

   Specification:  Indicates that the connection should use TimeStamped ACK frames 

This document also registers a new value in the QUIC Frame Type registry:

   Value:  TBD (using value 757 in early deployments)

   Frame Name:  Time Stamp

   Specification:  time stamp at the time packet was sent






   




--- back










